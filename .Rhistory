install.packages("maps")
library(maps)
map("world",fill=TRUE,col=rainbow(200),ylim = c(-60,90),mar=c(0,0,0,0))
install.packages("ggmap")
library(ggplot2)
library(ggmap)
geocode("Beijing")
mapdist('Beijing Normal University',"Renmin University of China",'walking')
library(ggmap)
library(mapproj)
map <- get_map(location = 'China', zoom = 4)
ggmap(map)
map <- get_map(location = 'China', zoom = 10)
ggmap(map)
rm(map)
library(ggplot2)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colours = factor(cyl)))
p + geom_point + geom_smooth()
p + geom_point()
p + geom_point() + geom_smooth()
str(mpg)
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = factor(cyl))
)
p + geom_point() + geom_smooth()
p <- ggplot(data = mpg, aes(x=displ, y=hwy))
p + geom_point(aes(colour = factor(cyl))) + geom_smooth()
p <- ggplot(data = mpg, aes(x = hwy))
p + geom_histogram()
summary(p)
p <- p + geom_histogram()
summary(p)
p <- ggplot(data = mpg, aes(hwy))
p + geom_histogram(position = 'identity', alpha = 0.5, aes(y = ..density..,fill = fator(year))) + stat_density(geom = 'line', position = 'identity', aes(colour = factor(year)))
p + geom_histogram(position = 'identity', alpha = 0.5, aes(y = ..density..,fill = factor(year))) + stat_density(geom = 'line', position = 'identity', aes(colour = factor(year)))
library(ggplot2)
with (mpg, table(class, year))
p <- ggplot(data = mpg, aes( x = class, fill = factor(year)))
p + geom_bar(position = 'dodge')
p + geom_bar(position =  'stack')
p + geom_bar(position =  'fill')
p + geom_bar(position =  'identity', alpha = 0.3)
p + geom_bar(position =  'identity', alpha = 0.5)
rm(list=ls())
library(ggplot2)
p <- ggplot(data = mpg, aes(cty, hwy))
p1 <- p + geom_point(aes(colour = factor(year),shape = factor(year),size = displ),alpha = 0.6, position = 'jitter')
p1
cty.mean = with(mpg, mean(cty))
cty.sd = with(mpg, sd(cty))
p1 + scale_x_continuous(trans = 'log', breaks = c(cty.mean - cty.sd, cty.mean, cty.mean + cty.sd), labels = c("High", "Mean", "Low")) + scale_y_continuous(trans = 'log')
p <- ggplot(mtcars, aes(x=wt,y=mpg,colour = factor(cyl),label = rownames(mtcars)))
p + geom_text(hjust = 0. vjust = -1, alpha = 0.8) + geom_point(size=3,aes(shape=factor(cyl)))
p + geom_text(hjust = 0, vjust = -1, alpha = 0.8) + geom_point(size=3,aes(shape=factor(cyl)))
p + geom_text(hjust = 1, vjust = -1, alpha = 0.8) + geom_point(size=1,aes(shape=factor(cyl)))
p + geom_text(hjust = -1, vjust = -1, alpha = 0.8) + geom_point(size=1,aes(shape=factor(cyl)))
p + geom_text(hjust = -0.2, vjust = -1, alpha = 0.8) + geom_point(size=3,aes(shape=factor(cyl)))
p + geom_text(hjust = -0.2, vjust = -1, alpha = 0.8) + geom_point(size=0.5,aes(shape=factor(cyl)))
p + geom_text(hjust = -0.2, vjust = -1, alpha = 0.8, size = 0.5) + geom_point(size=1,aes(shape=factor(cyl)))
p + geom_text(hjust = -0.2, vjust = -1, alpha = 0.8, size = 1) + geom_point(size=3,aes(shape=factor(cyl)))
p + geom_text(hjust = -0.2, vjust = -1, alpha = 0.8, size = 3) + geom_point(size=3,aes(shape=factor(cyl)))
p + geom_text(hjust = 0, vjust = -1, alpha = 0.8, size = 3) + geom_point(size=3,aes(shape=factor(cyl)))
library(quantmod)
install.packages("quantmod")
library(ggplot2)
library(quantmod)
getSymbols('^SSEC',src='yahoo',from='1997-01-01')
getSymbols('^SSEC',src='google',from='1997-01-01')
getSymbols('^SSEC',src='baidu',from='1997-01-01')
getSymbols('^SSEC',src='yahoo',from='2007-01-01')
rm(list = ls())
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p
p + geom_vline(xintercept = 5)
p + geom_vline(xintercept = 1:4)
p + geom_hline(yintercept = 20)
p + geom_abline()
p + geom_abline(intercept = 20)
coef(lm(mpg~wt), data = mtcars)
coef(lm(mpg ~ wt), data = mtcars)
library(mtcars)
with(mtcars,coef(lm(mog ~ wt)))
with(mtcars,coef(lm(mpg ~ wt)))
p + abline(intercept = 37, slop = -5)
p + geom_abline(intercept = 37, slop = -5)
p + geom_abline(intercept = 37, slope  = -5)
p + geom_smooth(method = "lm", se = FALSE)
p + geom_smooth(method = "lm")
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() + facet_wrap(~ cyl)
mean_wt <- data.frame(cyl = c(4,6,8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(aes(yintercept = wt), mean_wt)
ggplot(mtcars,aes(mpg,wt,colour=wt)) + geom_point() + geom_hline(aes(yintercept=wt,colour=wt),mean_wt) + facet_wrap(~cyl)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p1 <- p + geom_vline(xintercept = 5)
p1 <- p + geom_vline(xintercept = 1:5)
p1
p2 <- p + geom_hline(yintercept = 20)
p2
p1
p2 <- p1 + geom_hline(yintercept = 20)
p2
p3 <- p2 + geom_smooth()
p2
p3
p3_1 <- p2 + geom_smooth(method = "lm")
p3_1
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point() + facet_wrap(~cyl)
p
mean_wt <- data.frame(cyl = c(4,5,6), wt = 2.28, 3.11, 4.00)
p + geom_hline(aes(yintercept = wt), mean_wt)
mean_wt <- data.frame(cyl = c(4,6,8), wt = 2.28, 3.11, 4.00)
p + geom_hline(aes(yintercept = wt), mean_wt)
mean_wt <- data.frame(cyl = c(4,6,8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(aes(yintercept = wt), mean_wt)
ggplot(mtcars, aes(mpg,wt,colour = wt)) + geom_point()+geom_hline(aes(yintercept = wt, colour = wt), mean_wt) + facet_wrap(~cyl)
g <- ggplot(mpg, aes(class))
g + geeom_bar()
g + geom_bar()
rm(list= ls())
g
p = ggplot(data = mpg, aes(class))
p
p = p + geom_bar()
p
rm(p)
simple()
simples()
demo()
getwd()
install.packages("rworldmap")
library(rworldmap)
vignette('rworldmap')
exit
exit()
q
quit
quit()
Sys.setenv(LANG="en_US.UTF-8")
install.packages("rworldmap",dependencies = TRUE)
library(ggmap)
library(mapproj)
map <- getmap(location = "China",zoom = 4)
map <- get_map(location = "China",zoom = 4)
library(ggmap)
library(ggplot2)
library(ggplot2)
library(ggmap)
?ggmap
hdf <- get_map("houston, texas")
hdf <- get_stamenmap("houston, texas")
hdf <- get_stamenmap("houston, texas")
hdf <- get_googlemap("houston, texas")
hdf <- get_googlemap("waco texas", zoom = 12) %>% ggmap()
hdf <- get_googlemap("waco texas", zoom = 12)
library(ggplot2)
library(ggmap)
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map)
library(ggplot2)
library(ggmap)
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map, extent = "device")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(ggmap)
map=get_map(location='San Fransico',maptype='roadmap',zoom=12)
map=get_map(location='San Fransico',maptype='roadmap',zoom=12)
library(ggplot2)
library(ggmap)
us <- c(left = 0, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map, extent = "device")
library(ggplot2)
library(ggmap)
us <- c(left = 0, bottom = 25.75, right = 67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map, extent = "device")
library(ggplot2)
library(ggmap)
us <- c(left = 0, bottom = 25.75, right = 180, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
?get_stamenmap
?get_openstreetmap
map <- get_openstreetmap(bbox = c(left = 1.23,bottom = -25.32, right = 187.56, top = 68.91), scale = 606250)
map <- get_openstreetmap(bbox = c(left = 1.23,bottom = -25.32, right = 187.56, top = 68.91))
gc <- geocode("white house, washington dc")
setwd("~/Desktop/Mapping/")
library(rworldmap)
par(family = "STKaiti")
mydata <- read.csv("national_data_orignal.csv", header = TRUE )
mydata_select <- subset(mydata, List == 1)
# North_East_Asia
mydata_select_NEA <- subset(mydata, Rigion_Code == 6)
mydata_select_NEA_select <- subset(mydata_select, Rigion_Code == 6)
# South_East_Asia
mydata_select_SEA <- subset(mydata, Rigion_Code == 5)
mydata_select_SEA_select <- subset(mydata_select, Rigion_Code == 5)
# South_Asia
mydata_select_SA <- subset(mydata, Rigion_Code == 2)
mydata_select_SA_select <- subset(mydata_select, Rigion_Code == 2)
# Middle_Asia
mydata_select_MA <- subset(mydata, Rigion_Code == 3)
mydata_select_MA_select <- subset(mydata_select, Rigion_Code == 3)
# West_Asia & North Africa
mydata_select_WANA <- subset(mydata, Rigion_Code == 4)
mydata_select_WANA_select <- subset(mydata_select, Rigion_Code == 4)
# Middle & East Europe
mydata_select_MEE <- subset(mydata, Rigion_Code == 1)
mydata_select_NEE_select <- subset(mydata_select, Rigion_Code == 1)
mymapdata <- joinCountryData2Map(mydata,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select <- joinCountryData2Map(mydata_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# North_East_Asia
mymapdata_select_NEA <- joinCountryData2Map(mydata_select_NEA,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_NEA_select <- joinCountryData2Map(mydata_select_NEA_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# South_East_Asia
mymapdata_select_SEA <- joinCountryData2Map(mydata_select_SEA,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_SEA_select <- joinCountryData2Map(mydata_select_SEA_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# South_Asia
mymapdata_select_SA <- joinCountryData2Map(mydata_select_SA,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_SA_select <- joinCountryData2Map(mydata_select_SA_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# Middle_Asia
mymapdata_select_MA <- joinCountryData2Map(mydata_select_MA,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_MA_select <- joinCountryData2Map(mydata_select_MA_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# West_Asia & North Africa
mymapdata_select_WANA <- joinCountryData2Map(mydata_select_WANA,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_WANA_select <- joinCountryData2Map(mydata_select_WANA_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# Middle & East Europe
mymapdata_select_MEE <- joinCountryData2Map(mydata_select_MEE,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
mymapdata_select_MEE_select <- joinCountryData2Map(mydata_select_NEE_select,joinCode = "NAME",nameJoinColumn = "WM_English_Names")
# (1.1) 一带一路沿线国家地理区域分布图（所有参与国）(全景图)
mapCountryData(mymapdata, nameColumnToPlot = "Rigion_Code", numCats = 6,
mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.2) 一带一路沿线国家地理区域分布图（代表性国家）(全景图)
mapCountryData(mymapdata_select, nameColumnToPlot = "Rigion_Code", numCats = 6,
mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.3) 一带一路沿线国家地理区域分布图（所有参与国）（局部图）
mapCountryData(mymapdata, nameColumnToPlot = "Rigion_Code", numCats = 6,
xlim = c(50,160), ylim = c(-10,80),mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.4) 一带一路沿线国家地理区域分布图（代表性国家）（局部图）
mapCountryData(mymapdata_select, nameColumnToPlot = "Rigion_Code", numCats = 6,
xlim = c(50,160), ylim = c(-10,80),mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.5) 一带一路沿线国家地理区域分布图（所有参与国）(局部图)
mapCountryData(mymapdata, nameColumnToPlot = "Country_Name", numCats = 65,
xlim = c(50,160), ylim = c(-10,80), mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.6) 一带一路沿线国家地理区域分布图（代表性国家）(局部图)
par(family = "STKaiti")
mapCountryData(mymapdata_select, nameColumnToPlot = "Country_Name", numCats = 65,
xlim = c(50,160), ylim = c(-10,80), mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = TRUE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
# (1.6) 一带一路沿线国家地理区域分布图（代表性国家）(局部图)
par(family = "STKaiti")
mapCountryData(mymapdata_select, nameColumnToPlot = "Country_Name", numCats = 65,
xlim = c(50,160), ylim = c(-10,80), mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
par(family = "STKaiti")
mapCountryData(mymapdata_select, nameColumnToPlot = "Country_Name", numCats = 65,
xlim = c(50,160), ylim = c(-10,80), mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
par(family = "STKaiti")
mapCountryData(mymapdata_select, nameColumnToPlot = "Country_Name", numCats = 65,
xlim = c(20,160), ylim = c(-10,80), mapRegion = "world", catMethod = "categorical",
colourPalette = "rainbow", addLegend = FALSE, borderCol = "grey",
mapTitle = "", oceanCol = "lightblue", aspect = 1,
missingCountryCol = "white", add = FALSE, nameColumnToHatch = "",
lwd = 0.5)
library(ggplot2)
rm(ls=list())
rm(list=ls())
rm(list = ls())
getwd()
library(ggplot2)
View(diamonds)
dsamll <- diamonds[sample(nrow(diamonds),100),]
View(dsamll)
summary(dsamll)
qplot(carat, price, data = dsamll)
qplot(log(carat), log(price), data = dsamll)
qplot(carat, price, colour = color)
qplot(carat, price, data = dsamll, colour = color)
qplot(carat, price, data = dsamll, shape = cut)
qplot(carat, price, data = dsamll, shape = cut, colour = color)
qplot(carat, price, data = diamonds, colour = I("red"))
qplot(carat, price, data = diamonds, colour = color, alpha = I(1/100)))
qplot(carat, price, data = diamonds, colour = color, alpha = I(1/100))
qplot(carat, price, data = diamonds, colour = color, alpha = I(1/10))
qplot(carat, price, data data = diamonds, colour = color, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, colour = color, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("smooth"))
ls()
rm(dsamll)
getwd()
setwd("~/Documents/GitHub/Data-Mining-Visualization")
rm(list = ls())
getwd()
save.image()
